@model PatientManagementSystem.Models.Patient

<h2>Ajustar Cara para @Model.Name</h2>

<button id="generate-model" class="btn btn-primary">Generar Modelo 3D</button>
<div id="threejs-container" style="width: 100%; height: 600px; border: 1px solid #ddd;"></div>

<div id="adjustment-controls">
    <div class="form-group">
        <label for="cheeks-slider">Cachetes:</label>
        <input type="range" id="cheeks-slider" min="-10" max="10" step="1" />
    </div>
    <div class="form-group">
        <label for="chin-slider">Menton:</label>
        <input type="range" id="chin-slider" min="-10" max="10" step="1" />
    </div>
    <div class="form-group">
        <label for="nose-slider">Nariz:</label>
        <input type="range" id="nose-slider" min="-10" max="10" step="1" />
    </div>
    <button id="save-adjustments" class="btn btn-primary">Guardar Ajustes</button>
</div>

@section Scripts {
    <!-- ‚úÖ Load Three.js & GLTFLoader as regular scripts -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/GLTFLoader.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const container = document.getElementById('threejs-container');
            let model3DUrl = '@Model.Model3DUrl'.trim();

            function load3DModel(url) {
                container.innerHTML = ""; // Clear previous content

                if (!url || url === 'null') {
                    console.error("‚ùå Model3DUrl is missing or null");
                    container.innerHTML = "<p style='color:red'>‚ö†Ô∏è Error: No 3D model found. Please generate one.</p>";
                    return;
                }

                console.log("üì• Loading 3D Model from:", url);

                // Initialize Three.js scene
                const scene = new THREE.Scene();
                const camera = new THREE.PerspectiveCamera(75, container.offsetWidth / container.offsetHeight, 0.1, 1000);
                camera.position.z = 3;

                const renderer = new THREE.WebGLRenderer({ antialias: true });
                renderer.setSize(container.offsetWidth, container.offsetHeight);
                renderer.setPixelRatio(window.devicePixelRatio);
                container.appendChild(renderer.domElement);

                // Add lighting
                const light = new THREE.DirectionalLight(0xffffff, 1);
                light.position.set(10, 10, 10);
                scene.add(light);

                // Load 3D model from S3 using GLTFLoader
                const loader = new THREE.GLTFLoader();
                loader.load(url, function (gltf) {
                    const model = gltf.scene;
                    model.scale.set(1, 1, 1);
                    scene.add(model);

                    // Animation loop
                    function animate() {
                        requestAnimationFrame(animate);
                        renderer.render(scene, camera);
                    }
                    animate();

                    console.log("‚úÖ 3D model loaded successfully.");
                }, undefined, function (error) {
                    console.error("‚ùå Error loading 3D model:", error);
                    container.innerHTML = "<p style='color:red'>‚ö†Ô∏è Error loading 3D model.</p>";
                });

                // Resize handling
                window.addEventListener('resize', () => {
                    const width = container.clientWidth;
                    const height = container.clientHeight;
                    camera.aspect = width / height;
                    camera.updateProjectionMatrix();
                    renderer.setSize(width, height);
                });
            }

            // Load existing 3D model if available
            if (model3DUrl) {
                load3DModel(model3DUrl);
            }

            // Handle Generate Model button click
            document.getElementById('generate-model').addEventListener('click', function () {
                fetch('/Patients/Generate3DModel/@Model.Id', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        model3DUrl = data.modelFileUrl;
                        load3DModel(model3DUrl);
                    } else {
                        alert('‚ö†Ô∏è Error generating 3D model: ' + data.message);
                    }
                })
                .catch(error => console.error('‚ùå Error:', error));
            });

            // Save Adjustments
            document.getElementById('save-adjustments').addEventListener('click', function () {
                const adjustments = {
                    cheeks: document.getElementById('cheeks-slider').value,
                    chin: document.getElementById('chin-slider').value,
                    nose: document.getElementById('nose-slider').value
                };

                fetch('/Patients/SaveAdjustments/@Model.Id', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(adjustments)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('‚úÖ Adjustments saved successfully!');
                    } else {
                        alert('‚ö†Ô∏è Error saving adjustments.');
                    }
                })
                .catch(error => console.error('‚ùå Error:', error));
            });
        });
    </script>
}
