@model PatientManagementSystem.Models.Patient

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- Loader Overlay -->
<div id="page-loader" class="loader-overlay" style="display: none;">
    <div class="loader"></div>
</div>

<div class="container mt-4">
    <h2 class="text-center">Ajustar Cara para @Model.Name</h2>
    
    <div class="row mt-3">
        <!-- Controls & Buttons -->
        <div class="col-md-4">
            <div class="d-grid gap-2">
                <button id="generate-model" class="btn btn-primary">Generar Modelo 3D</button>
                <button id="retexture-model" class="btn btn-warning">Re Texturizar</button>
                <!-- We'll reuse this "Guardar Snapshot" button to save the GLB instead -->
                <button id="capture-snapshot" class="btn btn-secondary" style="display: none;">Guardar Snapshot</button>
            </div>

            <div class="mt-4">
                <h4>Controles de Ajuste</h4>
                <div class="form-group">
                    <label for="cheeks-slider" class="form-label">Cachetes:</label>
                    <input type="range" id="cheeks-slider" class="form-range" min="-10" max="10" step="1" />
                </div>
                <div class="form-group">
                    <label for="chin-slider" class="form-label">Menton:</label>
                    <input type="range" id="chin-slider" class="form-range" min="-10" max="10" step="1" />
                </div>
                <div class="form-group">
                    <label for="nose-slider" class="form-label">Nariz:</label>
                    <input type="range" id="nose-slider" class="form-range" min="-10" max="10" step="1" />
                </div>
            </div>

            <div class="mt-4">
                <label for="notes" class="form-label">Notas:</label>
                <textarea id="notes" class="form-control" rows="3" placeholder="Escribe tus notas aquí..."></textarea>
            </div>
        </div>

        <!-- 3D Model Container -->
        <div class="col-md-8">
            <div id="threejs-container" class="border" style="width: 100%; height: 600px;"></div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .loader-overlay {
            position: fixed;
            z-index: 9999;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            background: rgba(255, 255, 255, 0.8);
        }

        .loader {
            border: 16px solid #f3f3f3;
            border-radius: 50%;
            border-top: 16px solid #3498db;
            width: 120px;
            height: 120px;
            animation: spin 2s linear infinite;
        }

        @@keyframes spin {
            0% {
                transform: rotate(0deg);
            }
            100% {
                transform: rotate(360deg);
            }
        }
    </style>
}

@section Scripts {
    <!-- Three.js + OrbitControls + GLTFLoader + GLTFExporter -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/GLTFLoader.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/exporters/GLTFExporter.js"></script>

    <script>
        let notesField;
        let patientId;
        async function saveGLB() {
            if (!window.mesh) {
                alert("No se encontró el modelo 3D.");
                return;
            }

            loaderOverlay.style.display = 'flex';

            const exporter = new THREE.GLTFExporter();

            exporter.parse(scene, async function (gltf) {
                const glbBlob = new Blob([gltf], { type: "model/gltf-binary" });

                const reader = new FileReader();
                reader.readAsDataURL(glbBlob);
                reader.onloadend = async function () {
                    const base64data = reader.result;

                    const notes = notesField.value.trim();
                    if (!notes) {
                        alert("Debes ingresar las notas");
                        loaderOverlay.style.display = 'none';
                        return;
                    }

                    const requestBody = {
                        Model3D: base64data,
                        Notes: notes
                    };

                    try {
                        const response = await fetch(`/Patients/SaveFaceAdjustment/${patientId}`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(requestBody)
                        });

                        if (!response.ok) {
                            const errorText = await response.text();
                            console.error("❌ Fetch failed:", response.status, response.statusText, errorText);
                            alert(`❌ Error al guardar el GLB. Detalles: ${response.statusText}`);
                            loaderOverlay.style.display = 'none';
                            return;
                        }

                        const result = await response.json();
                        if (result.success) {
                            alert("Historico guardado correctamente");
               
                            loaderOverlay.style.display = 'none';
                            window.location.href = `/Patients/History/${patientId}`;
                        } else {
                            alert(`❌ ${result.message}`);
                            loaderOverlay.style.display = 'none';
                        }
                    } catch (error) {
                        console.error("❌ Error:", error);
                        alert("❌ Ocurrió un error al guardar el modelo 3D.");
                        loaderOverlay.style.display = 'none';
                    }
                };
            }, { binary: true });
        }

        document.addEventListener('DOMContentLoaded', async function () {
            const container = document.getElementById('threejs-container');
            const loaderOverlay = document.getElementById('page-loader');
            const snapshotButton = document.getElementById('capture-snapshot');
            const retextureButton = document.getElementById('retexture-model');
            

            notesField = document.getElementById('notes');
            patientId = @(Model?.Id ?? 0);

            let renderer, scene, camera, controls;

            const model3DUrl = "@(Model?.Model3DUrl ?? "")".trim();
            const remeshedTaskId = "@(Model?.RemeshedTaskId ?? "")".trim();

            async function init3DModel(url) {
                container.innerHTML = "";

                if (!url || url.trim() === "") {
                    container.innerHTML = "<p style='color:red'>⚠️ No se encontró el modelo 3D. Por favor, genera uno primero.</p>";
                    loaderOverlay.style.display = 'none';
                    return;
                }

                scene = new THREE.Scene();
                camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);
                camera.position.set(0, 1, 3);

                renderer = new THREE.WebGLRenderer({ antialias: true });
                renderer.setSize(container.clientWidth, container.clientHeight);
                renderer.setPixelRatio(window.devicePixelRatio);
                container.appendChild(renderer.domElement);

     
                const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
                scene.add(ambientLight);

                const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
                directionalLight.position.set(5, 10, 7);
                scene.add(directionalLight);

 
                const loader = new THREE.GLTFLoader();
                loader.load(url, function (gltf) {
                    const model = gltf.scene;
                    model.scale.set(1, 1, 1);
                    scene.add(model);

                    // Grab first mesh
                    model.traverse((obj) => {
                        if (obj.isMesh) {
                            window.mesh = obj;
                            obj.geometry.computeVertexNormals();
                            obj.geometry.computeBoundingBox();
                            console.log("Mesh loaded and ready for modifications");
                        }
                    });

                   
                    snapshotButton.style.display = 'block';

                    loaderOverlay.style.display = 'none';
                    animate();
                }, undefined, function (error) {
                    console.error("❌ Error al cargar el modelo:", error);
                    container.innerHTML = "<p style='color:red'>⚠️ Error cargando el modelo 3D.</p>";
                    loaderOverlay.style.display = 'none';
                });

          
                controls = new THREE.OrbitControls(camera, renderer.domElement);
                controls.enableDamping = true;
                controls.dampingFactor = 0.05;

                window.addEventListener('resize', () => {
                    camera.aspect = container.clientWidth / container.clientHeight;
                    camera.updateProjectionMatrix();
                    renderer.setSize(container.clientWidth, container.clientHeight);
                });
            }

            function animate() {
                requestAnimationFrame(animate);
                renderer.render(scene, camera);
                controls.update();
            }

 
            document.getElementById('generate-model').addEventListener('click', async function () {
                loaderOverlay.style.display = 'flex';

                const response = await fetch(`/Patients/Generate3DModel/${patientId}`, { method: 'POST' });
                const data = await response.json();

                if (data.success) {
                    const taskId = data.taskId;
                    alert("✅ Task created! Waiting for 3D model...");

                    // Poll
                    const checkInterval = setInterval(async () => {
                        const statusResponse = await fetch(`/Patients/CheckModelStatus/${taskId}/${patientId}`);
                        const statusData = await statusResponse.json();

                        if (statusData.success) {
                            clearInterval(checkInterval);
                            init3DModel(statusData.modelUrl);
                        }
                    }, 5000);
                } else {
                    loaderOverlay.style.display = 'none';
                    alert("❌ " + data.message);
                }
            });


            snapshotButton.addEventListener('click', saveGLB);

   
            if (model3DUrl) {
                loaderOverlay.style.display = 'flex';
                await init3DModel(model3DUrl);
            } else if (remeshedTaskId) {
                loaderOverlay.style.display = 'flex';
                try {
                    const remeshStatusResponse = await fetch(`/Patients/CheckRemeshStatus/${remeshedTaskId}/${patientId}`);
                    const remeshStatusData = await remeshStatusResponse.json();

                    if (remeshStatusData.success) {
                        await init3DModel(remeshStatusData.modelUrl);
                    } else {
                        alert("❌ Could not load remeshed model.");
                        loaderOverlay.style.display = 'none';
                    }
                } catch (error) {
                    console.error("❌ Error fetching remeshed model status:", error);
                    alert("❌ An error occurred while loading the remeshed model.");
                    loaderOverlay.style.display = 'none';
                }
            }


            retextureButton.addEventListener('click', async function () {
                loaderOverlay.style.display = 'flex';
                try {
                    const response = await fetch(`/Patients/RemeshModel/${patientId}`, { method: 'POST' });
                    const data = await response.json();

                    if (!data.success) {
                        alert(`❌ ${data.message}`);
                        loaderOverlay.style.display = 'none';
                        return;
                    }

                    const remeshTaskId = data.remeshTaskId;
                    alert("✅ Retexturizado en proceso esperando el modelo nuevo...");


                    const checkInterval = setInterval(async () => {
                        const statusResponse = await fetch(`/Patients/CheckRemeshStatus/${remeshTaskId}/${patientId}`);
                        const statusData = await statusResponse.json();

                        if (statusData.success) {
                            clearInterval(checkInterval);
                            alert("✅ Retexturizado listo! Cargando...");
                            await init3DModel(statusData.modelUrl);
                        } else if (!statusData.pending) {
                            clearInterval(checkInterval);
                            alert(`❌ ${statusData.message}`);
                            loaderOverlay.style.display = 'none';
                        }
                    }, 5000);
                } catch (error) {
                    console.error("❌ Error creating remesh task:", error);
                    alert("❌ An error occurred while creating the remesh task.");
                    loaderOverlay.style.display = 'none';
                }
            });
        });
    </script>

    <script>
     
        document.addEventListener('DOMContentLoaded', function () {
            function adjustFacePart(part, value) {
                if (!window.mesh || !window.mesh.geometry) return;
                
                const position = window.mesh.geometry.attributes.position;
                const boundingBox = window.mesh.geometry.boundingBox;

                for (let i = 0; i < position.count; i++) {
                    let x = position.getX(i);
                    let y = position.getY(i);
                    let z = position.getZ(i);

             
                    if (part === "cheeks" && y > boundingBox.min.y + 0.2 && y < boundingBox.max.y - 0.2) {
                        position.setX(i, x + value * 0.002);
                    }

          
                    if (part === "chin" && y < boundingBox.min.y + 0.2) {
                        position.setY(i, y + value * 0.002);
                    }

            
                    if (part === "nose" && x > boundingBox.min.x + 0.1 && x < boundingBox.max.x - 0.1 && y > boundingBox.min.y + 0.5) {
                        position.setZ(i, z + value * 0.002);
                    }
                }

                position.needsUpdate = true;
                window.mesh.geometry.computeVertexNormals();
            }

 
            document.getElementById('cheeks-slider').addEventListener('input', function () {
                adjustFacePart("cheeks", parseFloat(this.value));
            });

            document.getElementById('chin-slider').addEventListener('input', function () {
                adjustFacePart("chin", parseFloat(this.value));
            });

            document.getElementById('nose-slider').addEventListener('input', function () {
                adjustFacePart("nose", parseFloat(this.value));
            });
        });
    </script>
}
