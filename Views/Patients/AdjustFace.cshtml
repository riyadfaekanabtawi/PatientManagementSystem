@model PatientManagementSystem.Models.Patient

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Ajustar Cara para @Model.Name</h2>

<button id="generate-model" class="btn btn-primary">Generar Modelo 3D</button>
<br>
<div id="threejs-container" style="width: 100%; height: 600px; border: 1px solid #ddd;"></div>

<div id="adjustment-controls">
    <div class="form-group">
        <label for="cheeks-slider">Cachetes:</label>
        <input type="range" id="cheeks-slider" min="-10" max="10" step="1" />
    </div>
    <div class="form-group">
        <label for="chin-slider">Menton:</label>
        <input type="range" id="chin-slider" min="-10" max="10" step="1" />
    </div>
    <div class="form-group">
        <label for="nose-slider">Nariz:</label>
        <input type="range" id="nose-slider" min="-10" max="10" step="1" />
    </div>
<br><br>
    <div class="form-group">
        <label for="notes">Notas:</label>
        <textarea id="notes" class="form-control" rows="3" placeholder="Escribe tus notas aquí..."></textarea>
    </div>
<br>
    <button id="save-face-adjustment" class="btn btn-success">Guardar Ajustes</button>
</div>

@section Scripts {
    <!-- ✅ Load Three.js & GLTFLoader as regular scripts -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/GLTFLoader.js"></script>

  <script>
    document.addEventListener('DOMContentLoaded', function () {
        const container = document.getElementById('threejs-container');
        let model3DUrl = '@Model.Model3DUrl'.trim();
        let patientId = @Model.Id; // Get patient ID

        let renderer, scene, camera;

        function init3DModel(url) {
            container.innerHTML = ""; // Clear previous content

            if (model3DUrl && model3DUrl !== "null" && model3DUrl.trim() !== "") {
                init3DModel(model3DUrl);
            } else {
                container.innerHTML = "<p style='color:red'>⚠️ No 3D model found. Please generate one.</p>";
            }

            scene = new THREE.Scene();
            camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);
            camera.position.z = 3;

            renderer = new THREE.WebGLRenderer({ antialias: true });
            renderer.setSize(container.clientWidth, container.clientHeight);
            renderer.setPixelRatio(window.devicePixelRatio);
            container.appendChild(renderer.domElement);

            const light = new THREE.DirectionalLight(0xffffff, 1);
            light.position.set(10, 10, 10);
            scene.add(light);

            const loader = new THREE.GLTFLoader();
            loader.load(url, function (gltf) {
                const model = gltf.scene;
                model.scale.set(1, 1, 1);
                scene.add(model);

                function animate() {
                    requestAnimationFrame(animate);
                    renderer.render(scene, camera);
                }
                animate();
            });

            window.addEventListener('resize', () => {
                camera.aspect = container.clientWidth / container.clientHeight;
                camera.updateProjectionMatrix();
                renderer.setSize(container.clientWidth, container.clientHeight);
            });
        }

        if (model3DUrl) {
            init3DModel(model3DUrl);
        }

        function captureSnapshot() {
            return new Promise((resolve, reject) => {
                if (!renderer) {
                    reject("⚠️ Renderer is not initialized. Cannot capture snapshot.");
                    return;
                }
                renderer.render(scene, camera);
                const imageUrl = renderer.domElement.toDataURL("image/png");
                resolve(imageUrl);
            });
        }

        document.getElementById('save-face-adjustment').addEventListener('click', async function () {
            const notes = document.getElementById('notes').value.trim();
            if (!notes) {
                alert("⚠️ Por favor, ingresa notas antes de guardar.");
                return;
            }

            const snapshot = await captureSnapshot();

            fetch('/Patients/SaveFaceAdjustment/' + patientId, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ snapshot, notes })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert("✅ Ajustes guardados con éxito! Redirigiendo al historial...");
                    window.location.href = "/Patients/History/" + patientId; // Redirect to history page
                } else {
                    alert("❌ Error al guardar los ajustes: " + data.message);
                }
            })
            .catch(error => console.error('❌ Error:', error));
        });
    });
</script>

}
