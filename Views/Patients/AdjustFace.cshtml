@model PatientManagementSystem.Models.Patient

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- Loader Overlay -->
<div id="page-loader" class="loader-overlay" style="display: none;">
    <div class="loader"></div>
</div>

<h2>Ajustar Cara para @Model.Name</h2>

<button id="generate-model" class="btn btn-primary">Generar Modelo 3D</button>
<br />
<div id="threejs-container" style="width: 100%; height: 600px; border: 1px solid #ddd;"></div>

@section Styles {
    <style>
        .loader-overlay {
            position: fixed;
            z-index: 9999;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            background: rgba(255, 255, 255, 0.8);
        }

        .loader {
            border: 16px solid #f3f3f3;
            border-radius: 50%;
            border-top: 16px solid #3498db;
            width: 120px;
            height: 120px;
            animation: spin 2s linear infinite;
        }

        @@keyframes spin {
            0% {
                transform: rotate(0deg);
            }
            100% {
                transform: rotate(360deg);
            }
        }
    </style>
}

@section Scripts {
    <!-- Load Three.js and GLTFLoader -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/GLTFLoader.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const container = document.getElementById('threejs-container');
            const loaderOverlay = document.getElementById('page-loader');
            let patientId = @(Model?.Id ?? 0); // Ensure patientId is valid

            function init3DModel(url) {
                container.innerHTML = ""; // Clear previous content

                if (!url || url.trim() === "") {
                    container.innerHTML = "<p style='color:red'>⚠️ No se encontró el modelo 3D. Por favor, genera uno primero.</p>";
                    loaderOverlay.style.display = 'none'; // Hide loader
                    return;
                }

                let scene = new THREE.Scene();
                let camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);
                camera.position.z = 3;

                let renderer = new THREE.WebGLRenderer({ antialias: true });
                renderer.setSize(container.clientWidth, container.clientHeight);
                renderer.setPixelRatio(window.devicePixelRatio);
                container.appendChild(renderer.domElement);

                const light = new THREE.DirectionalLight(0xffffff, 1);
                light.position.set(10, 10, 10);
                scene.add(light);

                const loader = new THREE.GLTFLoader();
                loader.load(url, function (gltf) {
                    const model = gltf.scene;
                    model.scale.set(1, 1, 1);
                    scene.add(model);

                    function animate() {
                        requestAnimationFrame(animate);
                        renderer.render(scene, camera);
                    }
                    animate();

                    loaderOverlay.style.display = 'none'; // ✅ Hide loader when model is fully rendered
                });

                window.addEventListener('resize', () => {
                    camera.aspect = container.clientWidth / container.clientHeight;
                    camera.updateProjectionMatrix();
                    renderer.setSize(container.clientWidth, container.clientHeight);
                });
            }

            document.getElementById('generate-model').addEventListener('click', async function () {
                loaderOverlay.style.display = 'flex'; // Show loader immediately

                try {
                    console.log(`Fetching: /Patients/Generate3DModel/${patientId}`);
                    let response = await fetch(`/Patients/Generate3DModel/${patientId}`, { method: 'POST' });

                    if (!response.ok) {
                        console.error("❌ Fetch failed:", response.status, response.statusText);
                        loaderOverlay.style.display = 'none'; // Hide loader on failure
                        return;
                    }

                    let data = await response.json();
                    if (!data.success) {
                        alert("❌ Error: " + data.message);
                        loaderOverlay.style.display = 'none'; // Hide loader on failure
                        return;
                    }

                    let taskId = data.taskId;
                    alert("✅ Task created! Waiting for 3D model...");

                    let checkInterval = setInterval(async () => {
                        console.log("Checking Task progress...")
                        let statusResponse = await fetch(`/Patients/CheckModelStatus/${taskId}/${patientId}`);
                        if (!statusResponse.ok) {
                            console.error("❌ Fetch failed:", statusResponse.status, statusResponse.statusText);
                            loaderOverlay.style.display = 'none'; // Hide loader on failure
                            clearInterval(checkInterval);
                            return;
                        }

                        let statusData = await statusResponse.json();
                        if (statusData.success) {
                            clearInterval(checkInterval);
                            alert("✅ 3D model ready! Loading...");

                            // Display the 3D model in the container
                            init3DModel(statusData.modelUrl);
                        } else if (!statusData.pending) {
                            clearInterval(checkInterval);
                            alert("❌ Error: " + statusData.message);
                            loaderOverlay.style.display = 'none'; // Hide loader on failure
                        }
                    }, 5000);
                } catch (error) {
                    console.error("❌ Error:", error);
                    loaderOverlay.style.display = 'none'; // Hide loader on failure
                }
            });
        });
    </script>
}
