@model PatientManagementSystem.Models.Patient

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- Loader Overlay -->
<div id="page-loader" class="loader-overlay" style="display: none;">
    <div class="loader"></div>
</div>

<h2>Ajustar Cara para @Model.Name</h2>

<button id="generate-model" class="btn btn-primary">Generar Modelo 3D</button>
<br />
<div id="threejs-container" style="width: 100%; height: 600px; border: 1px solid #ddd;"></div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/GLTFLoader.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const container = document.getElementById('threejs-container');
            const loaderOverlay = document.getElementById('page-loader');
            let patientId = @(Model?.Id ?? 0);
            let model3DUrl = "@(Model.Model3DUrl ?? "")".trim();
            let taskId = "@(Model.MeshyTaskId ?? "")".trim();

            function init3DModel(url) {
                if (!url || url.trim() === "") {
                    container.innerHTML = "<p style='color:red'>⚠️ No se encontró el modelo 3D.</p>";
                    loaderOverlay.style.display = 'none';
                    return;
                }

                let scene = new THREE.Scene();
                let camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);
                camera.position.z = 3;

                let renderer = new THREE.WebGLRenderer({ antialias: true });
                renderer.setSize(container.clientWidth, container.clientHeight);
                renderer.setPixelRatio(window.devicePixelRatio);
                container.appendChild(renderer.domElement);

                const loader = new THREE.GLTFLoader();
                loader.load(url, function (gltf) {
                    scene.add(gltf.scene);
                    function animate() {
                        requestAnimationFrame(animate);
                        renderer.render(scene, camera);
                    }
                    animate();
                    loaderOverlay.style.display = 'none';
                }, undefined, function (error) {
                    console.error("❌ Error loading model:", error);
                    loaderOverlay.style.display = 'none';
                });
            }

            async function checkExistingTask() {
                if (taskId) {
                    console.log("Checking existing task...");
                    let response = await fetch(`/Patients/CheckModelStatus/${taskId}/${patientId}`);
                    let data = await response.json();
                    if (data.success) {
                        model3DUrl = data.modelUrl;
                        init3DModel(model3DUrl);
                    }
                }
            }

            document.getElementById('generate-model').addEventListener('click', async function () {
                loaderOverlay.style.display = 'flex';
                let response = await fetch(`/Patients/Generate3DModel/${patientId}`, { method: 'POST' });
                let data = await response.json();
                if (data.success) {
                    taskId = data.taskId;
                    alert("✅ 3D model task created!");
                    checkExistingTask();
                } else {
                    alert("❌ Error: " + data.message);
                    loaderOverlay.style.display = 'none';
                }
            });

            if (model3DUrl) {
                init3DModel(model3DUrl);
            } else {
                checkExistingTask();
            }
        });
    </script>
}
