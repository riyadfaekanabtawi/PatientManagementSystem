@model PatientManagementSystem.Models.Patient

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- Loader Overlay -->
<div id="page-loader" class="loader-overlay" style="display: none;">
    <div class="loader"></div>
</div>

<h2>Ajustar Cara para @Model.Name</h2>

<button id="generate-model" class="btn btn-primary">Generar Modelo 3D</button>
<br />
<div id="threejs-container" style="width: 100%; height: 600px; border: 1px solid #ddd;"></div>

<div id="adjustment-controls">
    <div class="form-group">
        <label for="cheeks-slider">Cachetes:</label>
        <input type="range" id="cheeks-slider" min="-10" max="10" step="1" />
    </div>
    <div class="form-group">
        <label for="chin-slider">Menton:</label>
        <input type="range" id="chin-slider" min="-10" max="10" step="1" />
    </div>
    <div class="form-group">
        <label for="nose-slider">Nariz:</label>
        <input type="range" id="nose-slider" min="-10" max="10" step="1" />
    </div>
    <br /><br />
    <div class="form-group">
        <label for="notes">Notas:</label>
        <textarea id="notes" class="form-control" rows="3" placeholder="Escribe tus notas aqu√≠..."></textarea>
    </div>
    <br />
    <button id="save-face-adjustment" class="btn btn-success">Guardar Ajustes</button>
</div>

@section Styles {
    <style>
        .loader-overlay {
            position: fixed;
            z-index: 9999;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            background: rgba(255, 255, 255, 0.8);
        }

        .loader {
            border: 16px solid #f3f3f3;
            border-radius: 50%;
            border-top: 16px solid #3498db;
            width: 120px;
            height: 120px;
            animation: spin 2s linear infinite;
        }

        @@keyframes spin {
            0% {
                transform: rotate(0deg);
            }
            100% {
                transform: rotate(360deg);
            }
        }
    </style>
}

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/GLTFLoader.js"></script>

    <script>
        const MASTERPIECE_X_API_KEY = "zpka_7a8b1beb401e40deaea97a1dd6c794dc_1d431f38"; // üîπ Replace with your API key
        let patientId = @Model.Id;
        let imageUrl = '@Model.FrontImageUrl'; // üîπ Ensure this is not null

        if (!imageUrl || imageUrl.trim() === "") {
            alert("‚ö†Ô∏è No se encontr√≥ imagen frontal. Aseg√∫rate de subir una imagen.");
        }

        document.getElementById('generate-model').addEventListener('click', async function () {
            if (!imageUrl) {
                alert("‚ö†Ô∏è No se encontr√≥ imagen frontal. No se puede generar modelo.");
                return;
            }

            const loaderOverlay = document.getElementById('page-loader');
            loaderOverlay.style.display = 'flex';

            try {
                // Step 1: Send image URL to Masterpiece X API
                const response = await fetch("https://api.masterpiecex.com/functions/imageto3d", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "Authorization": `Bearer ${MASTERPIECE_X_API_KEY}`
                    },
                    body: JSON.stringify({
                        imageUrl: imageUrl,
                        textureSize: 1024
                    })
                });

                const data = await response.json();
                if (!data.requestId) {
                    throw new Error("‚ùå Error al enviar imagen a Masterpiece X");
                }

                const requestId = data.requestId;
                console.log("üì§ Enviado a Masterpiece X, requestId:", requestId);

                // Step 2: Polling status every 5 seconds
                let modelUrl = null;
                while (true) {
                    await new Promise(resolve => setTimeout(resolve, 5000)); // Wait 5 sec

                    const statusResponse = await fetch(`https://api.masterpiecex.com/status/${requestId}`, {
                        headers: { "Authorization": `Bearer ${MASTERPIECE_X_API_KEY}` }
                    });

                    const statusData = await statusResponse.json();
                    console.log("üì° Polling status:", statusData);

                    if (statusData.status === "complete") {
                        modelUrl = statusData.outputs.glb;
                        break;
                    } else if (statusData.status === "failed") {
                        throw new Error("‚ùå Error al generar modelo 3D.");
                    }
                }

                alert("‚úÖ Modelo 3D generado con √©xito!");
                loaderOverlay.style.display = 'none';

                // Load 3D model in Three.js
                load3DModel(modelUrl);

                // (Optional) Save to database
                saveModelToDatabase(patientId, modelUrl);

            } catch (error) {
                console.error(error);
                alert(error.message);
                loaderOverlay.style.display = 'none';
            }
        });

        function load3DModel(url) {
            const container = document.getElementById('threejs-container');
            container.innerHTML = ""; // Clear previous content

            if (!url) {
                container.innerHTML = "<p style='color:red'>‚ö†Ô∏è No se encontr√≥ el modelo 3D.</p>";
                return;
            }

            const scene = new THREE.Scene();
            const camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);
            camera.position.z = 3;

            const renderer = new THREE.WebGLRenderer({ antialias: true });
            renderer.setSize(container.clientWidth, container.clientHeight);
            renderer.setPixelRatio(window.devicePixelRatio);
            container.appendChild(renderer.domElement);

            const light = new THREE.DirectionalLight(0xffffff, 1);
            light.position.set(10, 10, 10);
            scene.add(light);

            const loader = new THREE.GLTFLoader();
            loader.load(url, function (gltf) {
                const model = gltf.scene;
                model.scale.set(1, 1, 1);
                scene.add(model);

                function animate() {
                    requestAnimationFrame(animate);
                    renderer.render(scene, camera);
                }
                animate();
            });

            window.addEventListener('resize', () => {
                camera.aspect = container.clientWidth / container.clientHeight;
                camera.updateProjectionMatrix();
                renderer.setSize(container.clientWidth, container.clientHeight);
            });
        }

        function saveModelToDatabase(patientId, modelUrl) {
            fetch(`/Patients/Save3DModel/${patientId}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ modelUrl })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    console.log("‚úÖ Modelo guardado en la base de datos.");
                } else {
                    console.log("‚ùå Error al guardar en BD:", data.message);
                }
            })
            .catch(error => console.error('‚ùå Error:', error));
        }
    </script>
}
