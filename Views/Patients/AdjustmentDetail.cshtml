@model PatientManagementSystem.Models.FaceAdjustmentHistory

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2 class="text-center my-4">Detalle del Ajuste</h2>

<div class="container">
    <p><strong>Paciente:</strong> @Model.Patient.Name</p>
    <p><strong>Notas:</strong> @Model.Notes</p>
    <p><strong>Fecha:</strong> @Model.AdjustmentDate.ToString("dd/MM/yyyy HH:mm")</p>

    <div class="border" id="threejs-container" style="width: 100%; height: 600px;"></div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/GLTFLoader.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const container = document.getElementById('threejs-container');

            // Scene, camera, renderer
            const scene = new THREE.Scene();
            const camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);
            camera.position.set(0, 1, 3);

            const renderer = new THREE.WebGLRenderer({ antialias: true });
            renderer.setSize(container.clientWidth, container.clientHeight);
            renderer.setPixelRatio(window.devicePixelRatio);
            container.appendChild(renderer.domElement);

            // Lights
            const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
            scene.add(ambientLight);

            const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
            directionalLight.position.set(5, 10, 7);
            scene.add(directionalLight);

            // Orbit Controls
            const controls = new THREE.OrbitControls(camera, renderer.domElement);
            controls.enableDamping = true;
            controls.dampingFactor = 0.05;

            // Load the GLB
            const loader = new THREE.GLTFLoader();
            loader.load("@Model.Model3DUrl", function (gltf) {
                scene.add(gltf.scene);
            }, undefined, function (error) {
                console.error("Error loading 3D model:", error);
            });

            // Handle resizing
            window.addEventListener('resize', () => {
                camera.aspect = container.clientWidth / container.clientHeight;
                camera.updateProjectionMatrix();
                renderer.setSize(container.clientWidth, container.clientHeight);
            });

            // Animate
            function animate() {
                requestAnimationFrame(animate);
                renderer.render(scene, camera);
                controls.update();
            }
            animate();
        });
    </script>
}
