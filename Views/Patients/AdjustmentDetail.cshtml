@model PatientManagementSystem.Models.FaceAdjustmentHistory

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- Card Container -->
<div class="container my-4">
    <div class="card shadow">
        <div class="card-header bg-primary text-white">
            <h3 class="card-title mb-0">Informaci√≥n del Ajuste</h3>
        </div>
        <div class="card-body">
            <div class="row">
                <!-- Details Column -->
                <div class="col-md-4 mb-3">
                    <ul class="list-group">
                        <li class="list-group-item"><strong>Paciente:</strong> @Model.Patient.Name</li>
                        <li class="list-group-item"><strong>Notas:</strong> @Model.Notes</li>
                        <li class="list-group-item"><strong>Fecha:</strong> @Model.AdjustmentDate.ToString("dd/MM/yyyy HH:mm")</li>
                    </ul>
                </div>
                <!-- 3D Model Column -->
                <div class="col-md-8">
                    <div id="threejs-container" style="width: 100%; height: 500px; border: 1px solid #ddd; border-radius: 4px;"></div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Include Three.js, OrbitControls, and GLTFLoader -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/GLTFLoader.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const container = document.getElementById('threejs-container');

            // Create Scene, Camera, Renderer
            const scene = new THREE.Scene();
            const camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);
            camera.position.set(0, 1, 3);

            const renderer = new THREE.WebGLRenderer({ antialias: true });
            renderer.setSize(container.clientWidth, container.clientHeight);
            renderer.setPixelRatio(window.devicePixelRatio);
            container.appendChild(renderer.domElement);

            // Add Lights
            const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
            scene.add(ambientLight);

            const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
            directionalLight.position.set(5, 10, 7);
            scene.add(directionalLight);

            // Orbit Controls to allow user interaction
            const controls = new THREE.OrbitControls(camera, renderer.domElement);
            controls.enableDamping = true;
            controls.dampingFactor = 0.05;

            // Load the GLB model
            const loader = new THREE.GLTFLoader();
            loader.load("@Model.Model3DUrl", function (gltf) {
                scene.add(gltf.scene);
            }, undefined, function (error) {
                console.error("Error loading 3D model:", error);
            });

            // Handle resizing
            window.addEventListener('resize', () => {
                camera.aspect = container.clientWidth / container.clientHeight;
                camera.updateProjectionMatrix();
                renderer.setSize(container.clientWidth, container.clientHeight);
            });

            // Render Loop
            function animate() {
                requestAnimationFrame(animate);
                renderer.render(scene, camera);
                controls.update();
            }
            animate();
        });
    </script>
}
