@model PatientManagementSystem.Models.Patient
@inject IHttpContextAccessor HttpContextAccessor
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{
    ViewData["Title"] = "Historial de Ajustes - " + Model.Name;
}

<h2 class="text-center my-4">Historial de Ajustes para @Model.Name</h2>

@if (Model.AdjustmentHistory == null || !Model.AdjustmentHistory.Any())
{
    <div class="alert alert-warning text-center">No hay ajustes registrados para este paciente.</div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-bordered">
            <thead class="table-dark">
                <tr>
                    <th>Imagen Ajustada</th>
                    <th>Notas</th>
                    <th>Fecha y Hora</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var adjustment in Model.AdjustmentHistory.OrderByDescending(h => h.AdjustmentDate))
                {
                    <tr>
                        <td class="text-center">
                           <canvas class="glb-preview" data-model="@adjustment.Model3DUrl" style="width: 150px; height: 150px; border: 1px solid #ddd;"></canvas>
                            <a asp-action="AdjustmentDetail" asp-route-id="@adjustment.Id" class="btn btn-sm btn-primary">Ver Detalle</a>

                        </td>
                        <td>@adjustment.Notes</td>
                        <td>@adjustment.AdjustmentDate.ToString("dd/MM/yyyy HH:mm")</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<div class="text-center mt-4">
    <a asp-action="Index" class="btn btn-secondary">Volver a la lista de pacientes</a>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const previews = document.querySelectorAll('.glb-preview');

            previews.forEach(canvas => {
                const url = canvas.dataset.model;
                if (!url) return;

                const scene = new THREE.Scene();
                const camera = new THREE.PerspectiveCamera(50, 1, 0.1, 1000);
                camera.position.set(0, 1, 3);

                const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
                renderer.setSize(canvas.width, canvas.height);
                canvas.replaceWith(renderer.domElement);

                const loader = new THREE.GLTFLoader();
                loader.load(url, function (gltf) {
                    scene.add(gltf.scene);
                    renderer.render(scene, camera);
                });

                function animate() {
                    requestAnimationFrame(animate);
                    renderer.render(scene, camera);
                }
                animate();
            });
        });
    </script>
}
